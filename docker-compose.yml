# ================================
# Docker Compose para DentalSync
# ================================
# Configuración completa para desarrollo y producción
# Autor: Andrés Núñez - NullDevs
# Versión: 1.0
# ================================

version: '3.8'

services:
  # ================================
  # Aplicación Principal DentalSync
  # ================================
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: dentalsync-app
    restart: unless-stopped
    ports:
      - "8080:80"
    environment:
      - APP_NAME=DentalSync
      - APP_ENV=production
      - APP_DEBUG=false
      - APP_URL=http://localhost:8080
      - DB_CONNECTION=sqlite
      - DB_DATABASE=/var/www/html/database/database.sqlite
      - LOG_LEVEL=error
      - SESSION_DRIVER=database
      - CACHE_STORE=database
      - QUEUE_CONNECTION=database
    volumes:
      # Persistir base de datos SQLite
      - ./database/database.sqlite:/var/www/html/database/database.sqlite
      # Persistir logs
      - dentalsync_logs:/var/www/html/storage/logs
      # Persistir archivos subidos
      - dentalsync_storage:/var/www/html/storage/app
    networks:
      - dentalsync-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/up"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dentalsync.rule=Host(`dentalsync.local`)"
      - "traefik.http.services.dentalsync.loadbalancer.server.port=80"

  # ================================
  # Base de datos MySQL (opcional)
  # ================================
  mysql:
    image: mysql:8.0
    container_name: dentalsync-mysql
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: dentalsync
      MYSQL_USER: dentalsync
      MYSQL_PASSWORD: dentalsync_password
      MYSQL_ROOT_PASSWORD: root_password
    volumes:
      - dentalsync_mysql_data:/var/lib/mysql
      - ./docker/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "3306:3306"
    networks:
      - dentalsync-network
    profiles:
      - mysql # Solo se ejecuta si se especifica el perfil mysql

  # ================================
  # Redis para Cache (opcional)
  # ================================
  redis:
    image: redis:7-alpine
    container_name: dentalsync-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - dentalsync_redis_data:/data
    networks:
      - dentalsync-network
    profiles:
      - redis # Solo se ejecuta si se especifica el perfil redis

  # ================================
  # Nginx Reverse Proxy (opcional)
  # ================================
  nginx:
    image: nginx:alpine
    container_name: dentalsync-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    networks:
      - dentalsync-network
    profiles:
      - nginx # Solo se ejecuta si se especifica el perfil nginx

# ================================
# Volúmenes Persistentes
# ================================
volumes:
  dentalsync_logs:
    driver: local
    name: dentalsync_logs
  dentalsync_storage:
    driver: local
    name: dentalsync_storage
  dentalsync_mysql_data:
    driver: local
    name: dentalsync_mysql_data
  dentalsync_redis_data:
    driver: local
    name: dentalsync_redis_data

# ================================
# Red Interna
# ================================
networks:
  dentalsync-network:
    driver: bridge
    name: dentalsync-network

# ================================
# Configuraciones Adicionales
# ================================

# Para desarrollo con hot reload:
# docker-compose -f docker-compose.yml -f docker-compose.dev.yml up

# Para producción con MySQL:
# docker-compose --profile mysql up -d

# Para producción con Redis:
# docker-compose --profile redis up -d

# Para producción completa:
# docker-compose --profile mysql --profile redis --profile nginx up -d
