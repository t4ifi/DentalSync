#!/bin/bash

# ============================================================================
# DENTALSYNC - SCRIPT DE SOLUCI√ìN DE PROBLEMAS MARIADB
# Soluciona problemas comunes de configuraci√≥n de MariaDB
# ============================================================================

# Colores
GREEN='\033[0;32m'
RED='\033[0;31m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
CYAN='\033[0;36m'
NC='\033[0m'

echo -e "${CYAN}"
echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
echo "‚ïë           üîß  SOLUCI√ìN PROBLEMAS MARIADB                  ‚ïë"
echo "‚ïë            Solucionando problemas comunes...              ‚ïë"
echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
echo -e "${NC}"

# Funci√≥n para limpiar y recrear contenedores
reset_containers() {
    echo -e "${BLUE}üîÑ Limpiando contenedores y vol√∫menes...${NC}"
    
    # Detener contenedores
    docker compose -f Docker/docker-compose.dev.yml down -v
    
    # Eliminar vol√∫menes de MariaDB
    docker volume rm dentalsync_mariadb_data 2>/dev/null || true
    
    # Limpiar im√°genes no utilizadas
    docker system prune -f
    
    echo -e "${GREEN}‚úÖ Contenedores y vol√∫menes limpiados${NC}"
}

# Funci√≥n para recrear la base de datos
recreate_database() {
    echo -e "${BLUE}üóÑÔ∏è Recreando base de datos...${NC}"
    
    # Esperar a que MariaDB est√© listo
    echo -e "${YELLOW}‚è≥ Esperando a que MariaDB est√© listo...${NC}"
    sleep 10
    
    # Crear la base de datos con charset correcto
    docker exec dentalsync-mariadb mariadb -u root -prootpassword -e "
        DROP DATABASE IF EXISTS dentalsync;
        CREATE DATABASE dentalsync CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
        GRANT ALL PRIVILEGES ON dentalsync.* TO 'dentalsync'@'%';
        FLUSH PRIVILEGES;
    "
    
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úÖ Base de datos recreada exitosamente${NC}"
    else
        echo -e "${RED}‚ùå Error al recrear la base de datos${NC}"
        return 1
    fi
}

# Funci√≥n para ejecutar migraciones
run_migrations() {
    echo -e "${BLUE}üìä Ejecutando migraciones de Laravel...${NC}"
    
    # Esperar un poco m√°s para asegurar la conexi√≥n
    sleep 5
    
    # Ejecutar migraciones
    docker exec dentalsync-dev php artisan migrate:fresh --seed
    
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úÖ Migraciones ejecutadas exitosamente${NC}"
    else
        echo -e "${RED}‚ùå Error al ejecutar migraciones${NC}"
        echo -e "${YELLOW}üí° Verificando configuraci√≥n de Laravel...${NC}"
        docker exec dentalsync-dev php artisan config:clear
        docker exec dentalsync-dev php artisan cache:clear
        return 1
    fi
}

# Funci√≥n para verificar permisos de usuario
fix_user_permissions() {
    echo -e "${BLUE}üë§ Verificando permisos de usuario MariaDB...${NC}"
    
    docker exec dentalsync-mariadb mariadb -u root -prootpassword -e "
        CREATE USER IF NOT EXISTS 'dentalsync'@'%' IDENTIFIED BY 'password';
        GRANT ALL PRIVILEGES ON dentalsync.* TO 'dentalsync'@'%';
        GRANT ALL PRIVILEGES ON dentalsync.* TO 'dentalsync'@'localhost';
        FLUSH PRIVILEGES;
        SHOW GRANTS FOR 'dentalsync'@'%';
    "
    
    echo -e "${GREEN}‚úÖ Permisos de usuario verificados${NC}"
}

# Funci√≥n para probar conexi√≥n
test_connection() {
    echo -e "${BLUE}üîç Probando conexi√≥n desde diferentes puntos...${NC}"
    
    # Probar desde dentro del contenedor MariaDB
    echo -e "${CYAN}   Probando conexi√≥n local en MariaDB...${NC}"
    if docker exec dentalsync-mariadb mariadb -u dentalsync -ppassword -e "SELECT 'Conexi√≥n OK' as status;"; then
        echo -e "${GREEN}   ‚úÖ Conexi√≥n local OK${NC}"
    else
        echo -e "${RED}   ‚ùå Conexi√≥n local fall√≥${NC}"
    fi
    
    # Probar desde el contenedor de la aplicaci√≥n
    echo -e "${CYAN}   Probando conexi√≥n desde app...${NC}"
    if docker exec dentalsync-dev mariadb -h database -u dentalsync -ppassword -e "SELECT 'Conexi√≥n OK' as status;"; then
        echo -e "${GREEN}   ‚úÖ Conexi√≥n desde app OK${NC}"
    else
        echo -e "${RED}   ‚ùå Conexi√≥n desde app fall√≥${NC}"
    fi
    
    # Probar conexi√≥n de Laravel
    echo -e "${CYAN}   Probando conexi√≥n Laravel...${NC}"
    if docker exec dentalsync-dev php artisan migrate:status; then
        echo -e "${GREEN}   ‚úÖ Conexi√≥n Laravel OK${NC}"
    else
        echo -e "${RED}   ‚ùå Conexi√≥n Laravel fall√≥${NC}"
    fi
}

# Funci√≥n para mostrar logs √∫tiles
show_logs() {
    echo -e "${BLUE}üìã Logs recientes de MariaDB:${NC}"
    docker logs --tail 20 dentalsync-mariadb
    
    echo -e "${BLUE}üìã Logs recientes de la aplicaci√≥n:${NC}"
    docker logs --tail 10 dentalsync-dev
}

# Funci√≥n principal de diagn√≥stico
diagnose_and_fix() {
    echo -e "${BLUE}üîç Diagnosticando problemas...${NC}"
    
    # Verificar si los contenedores est√°n ejecut√°ndose
    if ! docker ps | grep -q "dentalsync-mariadb"; then
        echo -e "${YELLOW}‚ö†Ô∏è  MariaDB no est√° ejecut√°ndose${NC}"
        return 1
    fi
    
    if ! docker ps | grep -q "dentalsync-dev"; then
        echo -e "${YELLOW}‚ö†Ô∏è  Aplicaci√≥n no est√° ejecut√°ndose${NC}"
        return 1
    fi
    
    # Probar conexi√≥n b√°sica
    if docker exec dentalsync-mariadb mariadb -u root -prootpassword -e "SELECT 1;" > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ MariaDB responde correctamente${NC}"
    else
        echo -e "${RED}‚ùå MariaDB no responde${NC}"
        return 1
    fi
    
    # Verificar base de datos
    if ! docker exec dentalsync-mariadb mariadb -u dentalsync -ppassword -e "USE dentalsync;" > /dev/null 2>&1; then
        echo -e "${YELLOW}‚ö†Ô∏è  Base de datos no existe o no es accesible${NC}"
        recreate_database
        fix_user_permissions
    fi
    
    # Verificar migraciones
    if ! docker exec dentalsync-dev php artisan migrate:status > /dev/null 2>&1; then
        echo -e "${YELLOW}‚ö†Ô∏è  Laravel no puede conectarse${NC}"
        fix_user_permissions
        docker exec dentalsync-dev php artisan config:clear
        sleep 2
    fi
    
    return 0
}

# ============================================================================
# MEN√ö INTERACTIVO
# ============================================================================

show_menu() {
    echo -e "${BLUE}üîß Selecciona una opci√≥n:${NC}"
    echo "1. Diagn√≥stico completo y reparaci√≥n autom√°tica"
    echo "2. Recrear contenedores y base de datos (LIMPIA TODO)"
    echo "3. Solo recrear base de datos"
    echo "4. Ejecutar migraciones"
    echo "5. Verificar permisos de usuario"
    echo "6. Probar conexiones"
    echo "7. Mostrar logs"
    echo "8. Salir"
    echo ""
    read -p "Opci√≥n: " choice
}

# ============================================================================
# EJECUCI√ìN PRINCIPAL
# ============================================================================

while true; do
    show_menu
    
    case $choice in
        1)
            echo -e "${BLUE}üöÄ Ejecutando diagn√≥stico completo...${NC}"
            if diagnose_and_fix; then
                test_connection
                echo -e "${GREEN}‚úÖ Diagn√≥stico completado${NC}"
            else
                echo -e "${RED}‚ùå Se encontraron problemas${NC}"
                show_logs
            fi
            echo ""
            ;;
        2)
            echo -e "${YELLOW}‚ö†Ô∏è  ADVERTENCIA: Esto eliminar√° todos los datos${NC}"
            read -p "¬øContinuar? (y/N): " confirm
            if [[ $confirm == "y" || $confirm == "Y" ]]; then
                reset_containers
                echo -e "${BLUE}üöÄ Iniciando contenedores...${NC}"
                docker compose -f Docker/docker-compose.dev.yml up -d
                sleep 15
                recreate_database
                fix_user_permissions
                run_migrations
                test_connection
            fi
            echo ""
            ;;
        3)
            recreate_database
            fix_user_permissions
            echo ""
            ;;
        4)
            run_migrations
            echo ""
            ;;
        5)
            fix_user_permissions
            echo ""
            ;;
        6)
            test_connection
            echo ""
            ;;
        7)
            show_logs
            echo ""
            ;;
        8)
            echo -e "${GREEN}üëã ¬°Hasta luego!${NC}"
            exit 0
            ;;
        *)
            echo -e "${RED}‚ùå Opci√≥n inv√°lida${NC}"
            echo ""
            ;;
    esac
done