# ================================
# Dockerfile para DentalSync
# ================================
# Sistema de Gestión Dental completo
# Backend: Laravel 12 + Frontend: Vue.js 3
# Autor: Andrés Núñez - NullDevs
# Versión: 1.0 (Corregido - Nginx + PHP-FPM)
# ================================

# Usar imagen base oficial de PHP con FPM
FROM php:8.2-fpm

# Información del mantenedor
LABEL maintainer="Andrés Núñez - NullDevs"
LABEL description="DentalSync - Sistema de Gestión Dental"
LABEL version="1.0"

# Variables de entorno
ENV DEBIAN_FRONTEND=noninteractive
ENV APP_ENV=production
ENV APP_DEBUG=false

# Establecer directorio de trabajo
WORKDIR /var/www/html

# Instalar dependencias del sistema
RUN apt-get update && apt-get install -y \
    # Herramientas básicas
    git \
    curl \
    wget \
    vim \
    unzip \
    zip \
    # Librerías de PHP
    libpng-dev \
    libjpeg62-turbo-dev \
    libfreetype6-dev \
    libonig-dev \
    libxml2-dev \
    libzip-dev \
    libicu-dev \
    # Servidor web
    nginx \
    # Node.js y npm
    nodejs \
    npm \
    # Supervisor para procesos
    supervisor \
    # Limpieza
    && docker-php-ext-configure gd --with-freetype --with-jpeg \
    && docker-php-ext-install -j$(nproc) \
        pdo_mysql \
        mbstring \
        exif \
        pcntl \
        bcmath \
        gd \
        zip \
        intl \
        opcache \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Instalar Composer
COPY --from=composer:latest /usr/bin/composer /usr/bin/composer

# Crear usuario para la aplicación (security best practice)
RUN groupadd -g 1000 dentalsync \
    && useradd -u 1000 -ms /bin/bash -g dentalsync dentalsync

# Configurar PHP-FPM
RUN echo "pm = dynamic" >> /usr/local/etc/php-fpm.d/www.conf \
    && echo "pm.max_children = 20" >> /usr/local/etc/php-fpm.d/www.conf \
    && echo "pm.start_servers = 3" >> /usr/local/etc/php-fpm.d/www.conf \
    && echo "pm.min_spare_servers = 2" >> /usr/local/etc/php-fpm.d/www.conf \
    && echo "pm.max_spare_servers = 4" >> /usr/local/etc/php-fpm.d/www.conf \
    && echo "pm.max_requests = 500" >> /usr/local/etc/php-fpm.d/www.conf

# Configurar PHP para producción
RUN { \
    echo 'opcache.enable=1'; \
    echo 'opcache.memory_consumption=128'; \
    echo 'opcache.interned_strings_buffer=8'; \
    echo 'opcache.max_accelerated_files=4000'; \
    echo 'opcache.revalidate_freq=2'; \
    echo 'opcache.fast_shutdown=1'; \
    echo 'realpath_cache_size=4096K'; \
    echo 'realpath_cache_ttl=600'; \
} > /usr/local/etc/php/conf.d/opcache.ini

# Copiar archivos de dependencias primero (para cache de Docker)
COPY --chown=dentalsync:dentalsync composer.json composer.lock package.json package-lock.json ./

# Cambiar a usuario de aplicación para instalaciones
USER dentalsync

# Instalar dependencias de PHP
RUN composer install --no-dev --optimize-autoloader --no-interaction --prefer-dist

# Instalar dependencias de Node.js
RUN npm ci --only=production

# Volver a root para operaciones de sistema
USER root

# Copiar todo el código de la aplicación
COPY --chown=dentalsync:dentalsync . .

# Crear directorios necesarios y establecer permisos
RUN mkdir -p storage/logs \
    && mkdir -p storage/framework/cache \
    && mkdir -p storage/framework/sessions \
    && mkdir -p storage/framework/views \
    && mkdir -p bootstrap/cache \
    && chown -R dentalsync:dentalsync storage bootstrap/cache \
    && chmod -R 775 storage bootstrap/cache

# Generar clave de aplicación si no existe
USER dentalsync
RUN php artisan key:generate --force

# Ejecutar optimizaciones de Laravel
RUN php artisan config:clear \
    && php artisan route:clear \
    && php artisan view:clear

# Construir assets para producción
RUN npm run build

# Volver a root para configurar servicios
USER root

# Crear directorio para configuraciones Docker
RUN mkdir -p /docker-config

# Configurar Nginx
RUN rm -f /etc/nginx/sites-enabled/default
COPY docker/nginx.conf /etc/nginx/sites-available/dentalsync
RUN ln -s /etc/nginx/sites-available/dentalsync /etc/nginx/sites-enabled/dentalsync

# Configurar Supervisor
COPY docker/supervisord.conf /etc/supervisor/conf.d/supervisord.conf

# Script de inicio personalizado
COPY docker/start.sh /docker-config/start.sh
RUN chmod +x /docker-config/start.sh

# Exponer puerto 80
EXPOSE 80

# Comando de inicio
CMD ["/docker-config/start.sh"]
